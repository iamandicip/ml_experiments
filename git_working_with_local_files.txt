
Modifying Local Files: Recap

  There is only one working and one staging area, so you can create a branch after you've changed or added a file, and still commit that file to the new branch.
  git checkout -b "<new_branchname>" is a quick way to both create a new branch and check it out.
  If you edit a file after git adding it, then when you commit only the changes made before the git add will actually be commited. You must git add it again in order to commit all the changes.

--

Comparing Local File States

  In the last section, we made several changes to a local file, causing the file to appear in different stages of the commit process. The git diff command allows us to see what has changed in these different versions of our files. Let's explore some of these options now.

--

Viewing Local Diffs: Recap

  git diff allows you to compare different versions of a file against each other.
  On its own, git diff compares the working directory to the staged version of the file.
  git diff --staged compares the staged version to the most recent commited version.
  git diff HEAD combines the changes in your working and staged versions of the file, and compares them to the version of the file designated as HEAD (most often, the most recent commit).
  git diff --color-words displays a word-by-word comparision rather than a line-by-line comparison, helpful for small changes.

--

Merging Local Changes: Recap

  When performing a merge, you need to have checked out the branch you are merging into.
  git merge <branchname_to_merge> will merge the branch locally.
  To send the merge to the remote, simply git push. If you already have a PR for that branch open on GitHub, this will automatically close that PR.
  You must still delete the branch separately on GitHub (in the PR window) and locally (using git branch -d <branchname>).

--

Viewing Project History: Recap

  git pull updates the local directory to include all the changes made to the remote directory, even those done by other people.
  git log provides a list of all of the commits on the current branch, with the most recent commit first.
  Up and down arrows navigate, enter cycles through log entries, and q quits log viewing screen.
  git log --oneline shows a smaller version of the log.
  git log --oneline --graph shows a graph of the changes along with the one-line log.
  git log --oneline --graph --decorate includes information about the branches and the head.
  git log --oneline --graph --decorate --all also includes unmerged branches.
  git log --stat tells you which files were included in each commit.
  git log --patch shows the actual changes that were made in each commit as diffs.

--

Creating a Repository on the Command Line

You'll only be working locally for this section, so you won't need to interact with GitHub. Thus, it's a good chance to learn how to use Git on the command line to create a new local repo.

On the next slide you'll learn how to use git init to create a local repository, and then we'll use that repo in the rest of this lesson.

--

Handling Merge Conflicts: Recap

   When you have a merge conflict, type git status and look for "unmerged paths" to see which files are creating the merge conflict.

   Open the file in your text editor. You will see some lines that look like the following:

   <<<<<<<< HEAD
   Some text here.
   ========
   Different text here.
   >>>>>>>> merge-me

   The text above and below the equal signs are what is causing the merge conflict. They appear on the same line but are different text.

   Decide how you want to resolve the conflict, and once that's completed delete the merge markers. Save and close your text editor.

   git status will show that the files are no longer in conflict, but that you are in the middle of a merge. git add the file and then git commit it, and the merge will then automatically complete.

--

Renaming and Moving Files: Recap

   When moving files, use the command git mv rather than just the mv command.
   The syntax for this is git mv <filename> <new_directory>/<filename>.
   git mv automatically adds the file to the staging area after it is moved, so it can be commited right away.
   Just as with mv, you can use git mv to rename a file like so: git mv <filename> <new_filename>.

--

Reverting Commits: Recap

   When reverting, you revert a specific commit.
   Find that commit, and copy the first several characters of the SHA-1 hash.
   git revert <commit_hash> will create a new commit that is the exact opposite of the commit you're reverting.

--

Fixing Bad Commits: Recap

   The command git commit --amend will add whatever is in your staging area to your last commit, and allow you to edit that commit message.

--

Unstaging Files: Recap

   git reset HEAD <filename> will remove a file from the staging area, putting it back in your working directory.

--

Git Reset

Sometimes we are working on a branch and we decide things aren't going quite like we had planned. We want to reset some, or even all, of our files to look like what they were at a different point in history. We can do that with git reset.

Remember that there are three different snapshots of our project at any given time. The first is the most recent commit. The second is the staging area (also called the index). The third is the working directory (i.e. whatever you currently have saved on disk). The git reset command has three modes, and they allow us to change some or all of these three snapshots.

It also helps to know what branches technically are: each is a pointer, or reference, to the latest commit in a line of work. As we add new commits, the currently checked-out branch "moves forward," so that it always points to the most recent commit.

--

The three modes for git reset are: --soft, --mixed, and --hard. For these examples, assume that we have a "clean" working directory, i.e. there are no uncommited changes.

    git reset --soft <my-branch> <other-commit> moves <my-branch> to point at <other-commit>. However, the working directory and staging area remain untouched. Since the snapshot that <my-branch> points to now differs from the index's snapshot, this command effectively stages all differences between those snapshots. This is a good command to use when you have made a large number of small commits and you would like to regroup them into a single commit.

    With the --mixed option, Git makes <my-branch> and the staging area look like the <other-commit> snapshot. This is the default mode: if you don't include a mode flag, Git will assume you want --mixed. --mixed is useful if you want to keep all of your changes in the working directory, but change whether and how you commit those changes.

    --hard is the most drastic option. With this, Git will now make all 3 snapshots -- , the staging area, and your working directory -- look like they did at <other-commit>. This can be dangerous! We've assumed so far that our working directory is clean. If it is not, and you have uncommited changes, git reset --hard will delete all of those changes. Even with a clean working directory, use --hard only if you're sure you want to completely undo earlier changes.

--

Git Reset Options: Recap

   git revert reverts a specific commit. git reset resets git to a specific commit.
   git reset --soft <to_commit> resets git to a specific commit, and puts the commits you're resetting into the staging area where they can be easily re-committed.
   git reset --mixed <to_commit> resets git to a specific commit, and puts the commits you're resetting into the working directory so you can edit them directly.
   git reset --hard <to_commit> resets git to a specific commit, and deletes the commits you're resetting.
   Just like with git revert you can use the commit ID, or you can use the syntax HEAD~<number>. The number you put will be the number of commits backwards from the current HEAD that git will move the new HEAD to.
   You can always use git log to see all your previous history to know where to reset to.

--

Discarding Changes in Modified Files: Recap

   You can remove changes in the working directory using git checkout.
   This is destructive! You will throw away the changes and not be able to get them back.
   git checkout --<filename> is the syntax. The -- lets Git know you're talking about a file. This will revert the file to the version found in the last commit.
   This only works for files in the working directory. Files in the staging area or already commited won't be reverted.

--

Removing Tracked Files: Recap

   Just as git mv exists to move or rename a file and instantly add the change to the staging area, git rm exists to remove a file.
   git rm <filename> will remove the file and add the change to the staging area.

--

Creating Command Shortcuts: Recap

   You can create aliases in git that let you call on the short alias instead of writing out a full long command.
   You do this by setting a global alias using git config.
   git config --global alias.lol "log --oneline --graph --decorate --all" would let you type git lol instead of the entire log command with all its options.
   git config --global alias.co "commit -m" would let you write git co "Commit Message" to quickly commit with a message attached.
